# PRD: Centralización del Sistema de Uploads

## 1. Resumen del Proyecto
Centralizar todo el sistema de manejo de archivos subidos (uploads) en el frontend, organizándolos en una estructura de carpetas lógica y consistente que elimine dependencias de carpetas pre-existentes en el repositorio.

## 2. Problema Actual
- Las carpetas de uploads están siendo trackeadas en Git, causando conflictos al hacer `git pull`
- Imágenes y archivos se eliminan cuando se actualiza el proyecto desde el repositorio
- Sistema de uploads fragmentado entre backend y frontend
- Dependencia de carpetas pre-existentes en el repositorio

## 3. Solución Propuesta
Implementar un sistema centralizado de uploads en el frontend con:
- Carpeta principal: `/frontend/public/uploads/`
- Subcarpetas por tipo de contenido: `/posts/`, `/pdf/`, `/documentos/`, `/profiles/`, etc.
- Auto-creación de carpetas cuando no existen
- Eliminación completa de carpetas de uploads del repositorio Git

## 4. Estructura de Carpetas Objetivo
```
frontend/public/uploads/
├── posts/           # Imágenes y archivos de publicaciones
├── pdf/             # Documentos PDF
├── documentos/      # Documentos generales
├── profiles/        # Imágenes de perfil de usuarios
├── temp/            # Archivos temporales
└── [otros tipos según necesidad]
```

## 5. Requisitos Funcionales

### 5.1 Sistema de Auto-creación de Carpetas
- Verificar existencia de carpeta antes de guardar archivo
- Crear carpeta automáticamente si no existe
- Manejar permisos de escritura correctamente
- Log de creación de carpetas para debugging

### 5.2 Migración de Uploads Existentes
- Mover todos los uploads del backend a frontend
- Actualizar referencias en base de datos
- Mantener nombres de archivo originales
- Verificar integridad de archivos migrados

### 5.3 Actualización de APIs
- Modificar endpoints de upload para usar nueva estructura
- Actualizar rutas de archivos en respuestas de API
- Mantener compatibilidad con archivos existentes
- Implementar validación de tipos de archivo

### 5.4 Configuración Git
- Agregar `/frontend/public/uploads/` al .gitignore
- Eliminar carpetas de uploads del repositorio
- Mantener solo archivos .gitkeep donde sea necesario
- Documentar nueva estructura en README

## 6. Requisitos Técnicos

### 6.1 Frontend (Next.js)
- Componente centralizado para manejo de uploads
- Hook personalizado para subida de archivos
- Validación de tipos y tamaños de archivo
- Preview de archivos antes de subir
- Progress bar para uploads grandes

### 6.2 Backend (Python/FastAPI)
- Endpoints unificados para recibir uploads
- Validación server-side de archivos
- Organización automática por tipo de contenido
- API para listar archivos por categoría
- Limpieza automática de archivos temporales

### 6.3 Base de Datos
- Actualizar esquemas para nuevas rutas de archivos
- Scripts de migración de datos existentes
- Índices optimizados para búsqueda de archivos
- Campos para metadatos de archivos (tamaño, tipo, fecha)

## 7. Casos de Uso Específicos

### 7.1 Upload de Imágenes de Posts
- Carpeta: `/uploads/posts/`
- Formatos: JPG, PNG, WebP, GIF
- Tamaño máximo: 5MB por imagen
- Múltiples imágenes por post
- Compresión automática opcional

### 7.2 Upload de Documentos PDF
- Carpeta: `/uploads/pdf/`
- Formato: PDF únicamente
- Tamaño máximo: 10MB
- Validación de contenido PDF
- Thumbnail automático

### 7.3 Upload de Documentos Generales
- Carpeta: `/uploads/documentos/`
- Formatos: PDF, DOC, DOCX, XLS, XLSX
- Tamaño máximo: 15MB
- Validación de virus básica
- Metadatos extraídos

### 7.4 Imágenes de Perfil
- Carpeta: `/uploads/profiles/`
- Formatos: JPG, PNG
- Tamaño máximo: 2MB
- Redimensionado automático
- Formato cuadrado 300x300px

## 8. Seguridad
- Validación estricta de tipos MIME
- Sanitización de nombres de archivo
- Prevención de path traversal
- Límites de rate limiting para uploads
- Escaneo básico de malware

## 9. Performance
- Compresión automática de imágenes
- Lazy loading de archivos
- CDN-ready structure
- Caching de archivos estáticos
- Limpieza automática de archivos antiguos

## 10. Migración y Deployment

### 10.1 Pasos de Migración
1. Crear nueva estructura de carpetas
2. Migrar archivos existentes
3. Actualizar referencias en BD
4. Actualizar código backend/frontend
5. Probar funcionalidad completa
6. Limpiar repositorio Git

### 10.2 Rollback Plan
- Backup de archivos antes de migración
- Scripts de reversión de BD
- Branches de código de respaldo
- Documentación de pasos de rollback

## 11. Testing
- Tests unitarios para funciones de upload
- Tests de integración para flujo completo
- Tests de performance con archivos grandes
- Tests de seguridad con archivos maliciosos
- Tests de compatibilidad cross-browser

## 12. Documentación
- README actualizado con nueva estructura
- Documentación de API endpoints
- Guías para desarrolladores
- Troubleshooting común
- Ejemplos de uso

## 13. Métricas de Éxito
- 100% de uploads funcionando sin errores
- 0 conflictos de Git con archivos
- Tiempo de upload < 3 segundos para archivos normales
- 0 archivos perdidos durante migración
- Sistema estable por 30 días post-implementación

## 14. Timeline Estimado
- Fase 1: Configuración y estructura (1-2 días)
- Fase 2: Migración de código backend (2-3 días)  
- Fase 3: Actualización frontend (2-3 días)
- Fase 4: Migración de datos (1 día)
- Fase 5: Testing y ajustes (1-2 días)
- Fase 6: Cleanup Git y documentación (1 día)

**Total estimado: 8-12 días** 