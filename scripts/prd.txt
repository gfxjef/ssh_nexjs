# PRD: Actualización de la página de Solicitud de Merchandising

## OBJETIVO:
Actualizar la página de solicitud de merchandising para obtener datos de productos disponibles desde el backend a través de la API `/api/inventory/stock` y permitir a los usuarios seleccionar productos basados en su grupo y la cantidad de packs requerida.

## CONTEXTO:
Actualmente, la página de solicitud de merchandising utiliza datos estáticos (productosEjemplo) para mostrar los productos disponibles. Necesitamos conectarla al backend para obtener datos reales de la base de datos.

## REQUERIMIENTOS FUNCIONALES:

### 1. Integración con API de Stock
- Crear un servicio API en el frontend para llamar al endpoint `/api/inventory/stock?grupo=<grupo>` 
- El endpoint devuelve un objeto JSON donde cada clave es un código de producto (prefijo 'merch_') y el valor es la cantidad disponible en stock

### 2. Actualización de la interfaz de usuario
- Reemplazar los datos estáticos por los datos obtenidos de la API
- Mantener la lógica de filtrado según la cantidad de packs seleccionada
- Mostrar/ocultar productos dependiendo de si tienen suficiente stock para la cantidad solicitada

### 3. Formato de Datos
- Los nombres de productos deben mostrarse de forma legible (transformando 'merch_jugo_natural' en 'Jugo Natural')
- Los productos que terminan en '_eje' deben mostrarse en la categoría "Ejecutivo"
- Los productos que no terminan en '_eje' deben mostrarse en la categoría "Normal"

### 4. Gestión de Estados
- Implementar estados para controlar el loading y los errores
- Mostrar mensajes apropiados durante la carga o en caso de error

## DETALLES TÉCNICOS:
- Crear un archivo de API en `lib/api/marketingApi.ts` siguiendo el patrón existente
- Usar React hooks para gestionar el estado y los efectos
- Implementar funciones de transformación para convertir los datos de la API en el formato requerido por la UI

## CRITERIOS DE ACEPTACIÓN:
- La página debe cargar los productos desde el backend correctamente
- El filtrado por cantidad de packs debe funcionar como se espera
- Los productos deben mostrarse en las categorías correctas (normal/ejecutivo)
- La interfaz debe manejar estados de carga y error adecuadamente