# PRD - Sistema de Gestión de Documentos para Bienestar y Talento

## 1. Descripción General del Proyecto

**Nombre del Proyecto:** Sistema de Gestión de Documentos - Módulo Bienestar y Talento

**Objetivo:** Crear un sistema completo de administración y visualización de documentos organizados por categorías y etiquetas, integrado al módulo de Bienestar y Talento del dashboard empresarial.

## 2. Tecnologías Requeridas

### Backend
- **Framework:** Python Flask (siguiendo la estructura modular existente)
- **Base de Datos:** MySQL (usando la configuración existente en `backend/db/config.py`)
- **Estructura:** Módulo dentro de `backend/db/bienestar/`
- **Autenticación:** Integración con el sistema JWT existente
- **Subida de archivos:** Flask con validación de tipos MIME
- **Almacenamiento:** Sistema de archivos local con estructura organizada

### Frontend
- **Framework:** Next.js 14+ con TypeScript (siguiendo la estructura existente)
- **Ubicación:** `frontend/app/dashboard/bienestar/documentos/`
- **Estilos:** TailwindCSS (consistente con el diseño actual)
- **Permisos:** Integración con el sistema de permisos existente (`@lib/permissions`)
- **Iconos:** Material-UI Icons (consistente con el sidebar actual)

## 3. Funcionalidades Principales

### 3.1 Sistema de Administración de Documentos
- **Subida de documentos** con validación de tipos de archivo
- **Edición de metadatos** (título, descripción, categoría, etiquetas)
- **Re-upload** de documentos existentes
- **Eliminación** de documentos con confirmación
- **Previsualización** de documentos antes de subir
- **Validación de archivos** (tamaño máximo, tipos permitidos)

### 3.2 Sistema de Visualización y Descarga
- **Listado paginado** de documentos con filtros
- **Vista de detalles** de cada documento
- **Descarga segura** de archivos
- **Búsqueda** por título, descripción o etiquetas
- **Filtrado** por categorías y etiquetas
- **Vista previa** para documentos compatibles (PDF, imágenes)

### 3.3 Sistema de Categorización
- **Gestión de categorías** (Marketing, Recursos Humanos, Capacitación, Políticas, etc.)
- **Asignación de colores** a categorías para identificación visual
- **CRUD completo** para categorías
- **Estadísticas** por categoría

### 3.4 Sistema de Etiquetas
- **Etiquetas personalizables** para mejor organización
- **Autocompletado** en la asignación de etiquetas
- **Gestión de etiquetas** (crear, editar, eliminar)
- **Filtros múltiples** por etiquetas

## 4. Estructura de Base de Datos

### 4.1 Tabla: `categorias_documentos`
```sql
CREATE TABLE categorias_documentos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    color VARCHAR(7) DEFAULT '#3B82F6',
    icono VARCHAR(50) DEFAULT 'FolderIcon',
    activa BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

### 4.2 Tabla: `etiquetas_documentos`
```sql
CREATE TABLE etiquetas_documentos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    color VARCHAR(7) DEFAULT '#6B7280',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 4.3 Tabla: `documentos`
```sql
CREATE TABLE documentos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    titulo VARCHAR(255) NOT NULL,
    descripcion TEXT,
    nombre_archivo VARCHAR(255) NOT NULL,
    ruta_archivo VARCHAR(500) NOT NULL,
    tipo_archivo VARCHAR(50) NOT NULL,
    tamaño_archivo BIGINT NOT NULL,
    categoria_id INT NOT NULL,
    subido_por VARCHAR(100) NOT NULL,
    versiones INT DEFAULT 1,
    activo BOOLEAN DEFAULT TRUE,
    descargas INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (categoria_id) REFERENCES categorias_documentos(id) ON DELETE RESTRICT
);
```

### 4.4 Tabla: `documento_etiquetas` (Relación muchos a muchos)
```sql
CREATE TABLE documento_etiquetas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    documento_id INT NOT NULL,
    etiqueta_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (documento_id) REFERENCES documentos(id) ON DELETE CASCADE,
    FOREIGN KEY (etiqueta_id) REFERENCES etiquetas_documentos(id) ON DELETE CASCADE,
    UNIQUE KEY unique_documento_etiqueta (documento_id, etiqueta_id)
);
```

### 4.5 Tabla: `historial_documentos`
```sql
CREATE TABLE historial_documentos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    documento_id INT NOT NULL,
    accion ENUM('creado', 'actualizado', 'descargado', 'eliminado') NOT NULL,
    usuario VARCHAR(100) NOT NULL,
    detalles TEXT,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (documento_id) REFERENCES documentos(id) ON DELETE CASCADE
);
```

## 5. Tipos de Archivos Soportados

### 5.1 Documentos de Oficina
- **PDF:** .pdf
- **Microsoft Word:** .doc, .docx
- **Microsoft Excel:** .xls, .xlsx
- **Microsoft PowerPoint:** .ppt, .pptx
- **LibreOffice:** .odt, .ods, .odp

### 5.2 Imágenes
- **Formatos comunes:** .jpg, .jpeg, .png, .gif, .webp
- **Formatos profesionales:** .svg, .bmp, .tiff

### 5.3 Otros formatos
- **Texto:** .txt, .csv, .rtf
- **Archivos comprimidos:** .zip, .rar, .7z
- **Video:** .mp4, .avi, .mov (limitado por tamaño)

### 5.4 Restricciones
- **Tamaño máximo por archivo:** 50 MB
- **Tamaño máximo total por usuario:** 500 MB
- **Validación de contenido:** Verificación MIME type

## 6. Estructura de Directorios y Archivos

### 6.1 Backend Structure
```
backend/db/bienestar/
├── documentos/
│   ├── __init__.py
│   ├── models.py
│   ├── queries.py
│   ├── routes/
│   │   ├── __init__.py
│   │   ├── documentos.py
│   │   ├── categorias.py
│   │   ├── etiquetas.py
│   │   └── historial.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── file_handler.py
│   │   ├── validators.py
│   │   └── security.py
│   └── uploads/
│       ├── marketing/
│       ├── recursos_humanos/
│       ├── capacitacion/
│       └── otros/
```

### 6.2 Frontend Structure
```
frontend/app/dashboard/bienestar/documentos/
├── page.tsx                           # Lista principal de documentos
├── layout.tsx                         # Layout específico de documentos
├── administrar/
│   ├── page.tsx                       # Administración de documentos
│   ├── subir/
│   │   └── page.tsx                   # Subida de documentos
│   ├── categorias/
│   │   └── page.tsx                   # Gestión de categorías
│   └── etiquetas/
│       └── page.tsx                   # Gestión de etiquetas
├── [id]/
│   └── page.tsx                       # Vista de detalle de documento
├── components/
│   ├── DocumentCard.tsx               # Tarjeta de documento
│   ├── DocumentUpload.tsx             # Componente de subida
│   ├── DocumentFilters.tsx            # Filtros y búsqueda
│   ├── DocumentPreview.tsx            # Vista previa
│   ├── CategoryManager.tsx            # Gestión de categorías
│   ├── TagManager.tsx                 # Gestión de etiquetas
│   └── DocumentHistory.tsx            # Historial de acciones
├── hooks/
│   ├── useDocuments.ts                # Hook para documentos
│   ├── useCategories.ts               # Hook para categorías
│   └── useTags.ts                     # Hook para etiquetas
└── types/
    └── document.types.ts              # Tipos TypeScript
```

## 7. API Endpoints

### 7.1 Documentos
- `GET /api/bienestar/documentos` - Listar documentos con filtros
- `GET /api/bienestar/documentos/{id}` - Obtener documento específico
- `POST /api/bienestar/documentos` - Subir nuevo documento
- `PUT /api/bienestar/documentos/{id}` - Actualizar documento
- `DELETE /api/bienestar/documentos/{id}` - Eliminar documento
- `GET /api/bienestar/documentos/{id}/download` - Descargar archivo
- `POST /api/bienestar/documentos/{id}/reupload` - Re-subir archivo

### 7.2 Categorías
- `GET /api/bienestar/documentos/categorias` - Listar categorías
- `POST /api/bienestar/documentos/categorias` - Crear categoría
- `PUT /api/bienestar/documentos/categorias/{id}` - Actualizar categoría
- `DELETE /api/bienestar/documentos/categorias/{id}` - Eliminar categoría

### 7.3 Etiquetas
- `GET /api/bienestar/documentos/etiquetas` - Listar etiquetas
- `POST /api/bienestar/documentos/etiquetas` - Crear etiqueta
- `PUT /api/bienestar/documentos/etiquetas/{id}` - Actualizar etiqueta
- `DELETE /api/bienestar/documentos/etiquetas/{id}` - Eliminar etiqueta

### 7.4 Historial y Estadísticas
- `GET /api/bienestar/documentos/{id}/historial` - Historial de documento
- `GET /api/bienestar/documentos/estadisticas` - Estadísticas generales

## 8. Integración con Sistema de Permisos

### 8.1 Permisos Requeridos
- **`Bienestar y Talento/Documentos`** - Acceso a la visualización de documentos
- **`Bienestar y Talento/Documentos/Administrar`** - Acceso a la administración
- **`Bienestar y Talento/Documentos/Subir`** - Permiso para subir documentos
- **`Bienestar y Talento/Documentos/Eliminar`** - Permiso para eliminar documentos
- **`Bienestar y Talento/Documentos/Categorias`** - Gestión de categorías
- **`Bienestar y Talento/Documentos/Etiquetas`** - Gestión de etiquetas

### 8.2 Roles Sugeridos
- **Administrador:** Acceso completo a todas las funciones
- **Coordinador:** Subir, editar y gestionar documentos de su área
- **Usuario:** Solo visualización y descarga de documentos

## 9. Funcionalidades de Seguridad

### 9.1 Validación de Archivos
- Verificación de tipo MIME real vs extensión
- Escaneo básico de contenido malicioso
- Limitación de tamaño por archivo y por usuario
- Validación de nombres de archivo

### 9.2 Control de Acceso
- Autenticación JWT requerida para todas las operaciones
- Logs de todas las acciones (subida, descarga, eliminación)
- Restricción de descarga por permisos
- Auditoría de cambios

### 9.3 Almacenamiento Seguro
- Archivos almacenados fuera del directorio web público
- Nombres de archivo únicos (UUID) para evitar conflictos
- Respaldo automático de archivos importantes
- Limpieza automática de archivos huérfanos

## 10. Interfaz de Usuario

### 10.1 Páginas Principales
1. **Vista Principal:** Lista de documentos con filtros, búsqueda y paginación
2. **Administración:** Dashboard para gestión completa de documentos
3. **Subida de Documentos:** Formulario de subida con arrastrar y soltar
4. **Gestión de Categorías:** CRUD para categorías con vista de árbol
5. **Gestión de Etiquetas:** Administración de etiquetas con contadores de uso

### 10.2 Componentes Reutilizables
- Tarjetas de documento con vista previa
- Modal de detalles con historial
- Componente de filtros avanzados
- Drag & drop para subida de archivos
- Selector de categorías y etiquetas

### 10.3 Responsive Design
- Adaptable a dispositivos móviles y tablets
- Navegación optimizada para touch
- Carga progresiva de imágenes
- Interfaz intuitiva y accesible

## 11. Integración con Sidebar

### 11.1 Nuevas Entradas en navItemsConfig
```javascript
{
  name: 'Bienestar y Talento',
  icon: <FavoriteIcon />,
  submenus: [
    { name: 'Posts', href: '/dashboard/bienestar/posts', icon: <DynamicFeedIcon /> },
    { name: 'Administrar Posts', href: '/dashboard/bienestar/admin-posts', icon: <EditNoteIcon /> },
    { name: 'Documentos', href: '/dashboard/bienestar/documentos', icon: <FolderIcon /> },
    { name: 'Administrar Documentos', href: '/dashboard/bienestar/documentos/administrar', icon: <AdminPanelSettingsIcon /> }
  ],
}
```

### 11.2 Iconos Adicionales Requeridos
- `FolderIcon` para documentos
- `AdminPanelSettingsIcon` para administración
- `UploadFileIcon` para subida
- `CategoryIcon` para categorías
- `LabelIcon` para etiquetas

## 12. Pruebas y Validación

### 12.1 Pruebas Backend
- Tests unitarios para todos los endpoints
- Validación de subida de archivos
- Pruebas de seguridad y validación
- Tests de rendimiento con archivos grandes

### 12.2 Pruebas Frontend
- Tests de componentes React
- Pruebas de integración con la API
- Tests de responsividad
- Validación de formularios

### 12.3 Pruebas de Usuario
- Flujo completo de subida y descarga
- Gestión de categorías y etiquetas
- Búsqueda y filtrado
- Permisos y accesos

## 13. Consideraciones de Rendimiento

### 13.1 Backend
- Paginación en todas las listas
- Índices en base de datos para búsquedas
- Compresión de respuestas HTTP
- Cache de metadatos frecuentemente accedidos

### 13.2 Frontend
- Lazy loading de documentos
- Virtualización de listas largas
- Optimización de imágenes
- Cache de categorías y etiquetas

### 13.3 Archivos
- Streaming para archivos grandes
- Thumbnails para documentos con vista previa
- Compresión automática cuando sea posible
- CDN para archivos estáticos (futuro)

## 14. Plan de Implementación

### 14.1 Fase 1: Estructura Base (Tareas 1-8)
- Configuración de base de datos
- Estructura básica del backend
- Endpoints básicos de CRUD
- Estructura del frontend

### 14.2 Fase 2: Funcionalidades Core (Tareas 9-16)
- Sistema de subida de archivos
- Gestión de categorías y etiquetas
- Interface de usuario básica
- Integración con permisos

### 14.3 Fase 3: Funcionalidades Avanzadas (Tareas 17-24)
- Sistema de búsqueda y filtros
- Vista previa de documentos
- Historial y auditoría
- Optimizaciones de rendimiento

### 14.4 Fase 4: Pulimiento y Testing (Tareas 25-32)
- Tests completos
- Optimización de UI/UX
- Documentación
- Deploy y configuración final

## 15. Mantenimiento y Escalabilidad

### 15.1 Backup y Recuperación
- Backup automático diario de archivos
- Versionado de documentos importantes
- Procedimientos de recuperación documentados
- Monitoreo de espacio en disco

### 15.2 Escalabilidad Futura
- Migración a almacenamiento en la nube (S3, GCS)
- Implementación de CDN
- Microservicios para procesamiento de archivos
- Integración con sistemas de documento externos

### 15.3 Monitoreo
- Logs de acceso y errores
- Métricas de uso y rendimiento
- Alertas de espacio en disco
- Estadísticas de documentos más accedidos

---

**Nota:** Este PRD está diseñado para integrarse perfectamente con la arquitectura existente del proyecto, manteniendo consistencia en patrones de código, estructura de directorios y sistemas de permisos. 